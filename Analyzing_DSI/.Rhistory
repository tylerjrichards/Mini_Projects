studentdata <- data.frame(studentID, age, university, hired)
studentdata
#Subsetting dataframes
studentdata[1,3]
studentdata[1,"hired"]
studentdata$age
3<4
4>3*2
3==3*1
class(airquality)
str(airquality)
head(airquality)
tail(airquality)
#install.packages(c("datasets", "dplyr"))
library(datasets)
library(dplyr)
head(airquality)
head(filter(airquality, Wind > 5))
head(filter(airquality, Temp > 80 & Month > 5))
head(mutate(airquality, TempInC = (Temp - 32) * 5 / 9))
summarise(airquality, mean(Temp, na.rm = TRUE))
airquality %>%
filter(Month != 5) %>%
mutate(TempInc = (Temp - 32) * 5 / 9)
airquality %>%
filter(Month != 5) %>%
group_by(Month) %>%
summarise(mean(Temp, na.rm = TRUE))
install.packages("wooldridge")
library(wooldridge)
data('wage1')
wage1
View(wage1)
str(wage1)
plot(wage1$wage, wage1$numdep, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ")
plot(wage1$wage, wage1$numdep, main="Wage vs Dependents",
xlab="Wage ", ylab="Dependents")
lm(data = wage1, wage ~ numdep)
abline(lm(data = wage1, wage ~ numdep))
my_model = lm(data = wage1, wage ~ numdep)
my_model
my_model = lm(data = wage1, wage ~ .)
my_model
plot(my_model)
x = 5
x <- 3
x <- -3:2
print(x)
which(x > 2)
which(x > 0)
x[which(x>0)]
any(x > 2)
any(x > 1)
any(x >= 1)
any(x >= 2)
x = 1
print("nice")
UT_score = 21
if(UF_score>UT_score){
print("we won")
} else{
print('we lost')
}
UF_score = 47
if(UF_score>UT_score){
print("we won")
} else{
print('we lost')
}
if(UF_score>UT_score){
print("we won")
}if else(UF_score == UT_score){
print("we tied???")
}if else(UF_score < UT_score){
print("we lost")
}
if(UF_score>UT_score){
print("we won")
}if else(UF_score == UT_score){
print("we tied???")
}if else(UF_score < UT_score){
print("we lost")
}
if(UF_score>UT_score){
print("we won")
}else if(UF_score == UT_score){
print("we tied???")
}else if(UF_score < UT_score){
print("we lost")
}
1:10
for (i in 1:10){
print(i)
}
source('~/.active-rstudio-document', echo=TRUE)
ID <- 1:100
grade <- rnorm(100, 80, 5)
grade
comment <- 1:100
for(i in 1:100){
if(grade[i] > 95){
comment[i] <- "excellent"
}else if (grade[i] > 75){
comment[i] <- "ehh"
}else {
comment[i] <- 'rip'
}
}
comment
report <- data.frame(ID, grade, comment)
report
table(report$comment)
t(report)
big_matrix <- matrix(1:20,
ncol = 5, nrow = 4)
row_mean <- apply(big_matrix, 1, mean)
row_mean
big_matrix
col_mean <- apply(big_matrix, 2, mean)
col_mean
library(dplyr)
head(airquality)
airquality %>%
filter(Month > 2)
airquality %>%
filter(Month > 2) %>%
select(Month)
airquality %>%
filter(Month > 2) %>%
select(-Month)
airquality %>%
filter(Month > 2) %>%
group_by(Month)
airquality %>%
filter(Month > 2) %>%
group_by(Month) %>%
summarise(my_mean = mean(Temp))
airquality %>%
filter(Month > 2) %>%
group_by(Month) %>%
summarise(my_mean = mean(Temp), n())
airquality %>%
filter(Month > 2) %>%
group_by(Month) %>%
summarise(my_mean = mean(Temp), n()) %>%
select(1)
airquality %>%
filter(Month > 2) %>%
group_by(Month) %>%
summarise(my_mean = mean(Temp), n()) %>%
select(-1)
airquality %>%
filter(Month > 2) %>%
group_by(Month) %>%
summarise(my_mean = mean(Temp), n()) %>%
select(1:2)
airquality
library(reshape2)
melt(airquality, id.vars = c("Day", "Month"))
library(ggplot2)
ggplot(airquality)
ggplot(airquality, aes(x = Ozone, y = Temp))
ggplot(airquality, aes(Temp)) +
geom_histogram()
ggplot(airquality, aes(Temp)) +
geom_histogram(bins = 15)
ggplot(airquality, aes(Temp)) +
geom_histogram(bins = 45)
ggplot(airquality, aes(Temp)) +
geom_histogram(bins = 15)
ggplot(airquality, aes(x = Ozone, y = Temp)) +
geom_point()
ggplot(airquality, aes(Ozone, Temp)) +
geom_point(color = 'blue')
ggplot(airquality, aes(Ozone, Temp, color = Temp)) +
geom_point()
ggplot(airquality, aes(Ozone, Temp, color = Temp)) +
geom_point() + geom_smooth()
ggplot(airquality, aes(Ozone, Temp, color = Month)) +
geom_point()
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month)) +
x
l)
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month)) +
)
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month))) +
geom_point()
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month))) +
geom_point() +
facet_grid(. ~ Month)
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month))) +
geom_point() +
facet_grid(. ~ Month) +
geom_smooth(method = "lm")
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month))) +
geom_point() +
facet_grid(. ~ Month, rows = 5) +
geom_smooth(method = "lm")
library(devtools)
library(gganimate)
ggplot(airquality, aes(Ozone, Temp, color = as.factor(Month))) +
geom_point() +
geom_smooth(method = "lm") +
transition_states(Month, transition_length = 3, state_length = 1) +
enter_fade() +
exit_shrink()
x <- c(0.9,0.81,32.52,0);
nchar(sub('^0+','',sub('\\.','',x)));
x <- c("11---", "113///")
nchar(sub('^0+','',sub('\\.','',x)));
nchar(sub('^0+','',sub('/.','',x)));
nchar(sub('^0+','',sub('///','',x)));
gsub("/", "", x)
gsub("-", "", x)
x = gsub("/", "", x)
x = gsub("-", "", x)
x
nchar(x)
data.frame(x, nchar(x))
new_df = data.frame(x, nchar(x))
library(dplyr)
library(reshape2)
melt(new_df, id.vars = x)
colnames(new_df)
melt(new_df, id.vars = "x")
cast(new_df, id.vars = "x")
library(reshape)
cast(new_df, id.vars = "x")
cast(new_df, id = "x")
colnames(new_df)
library(googlesheets)
my_sheets = gs_ls()
View(my_sheets)
my_sheets %>%
filter(updated > as.Date("2018-08-01"))
library(dplyr)
my_sheets %>%
filter(updated > as.Date("2018-08-01"))
my_sheets
my_sheets = my_sheets %>%
filter(updated > as.Date("2018-08-01"))
my_sheets
View(my_sheets)
install.packages("qcc")
install.packages("e1071")
getwd()
getwd()
?read.csv
View(my_sheets)
colnames(my_new_data)
colnames(my_sheets)
install.packages("qcc")
?pnorm
pnorm(q = 5, mean = 7, sd = 2)
qnorm(.95, 100, 10)
qnorm(.95, 100, 10, lower.tail = TRUE)
qnorm(.95, 100, 10, lower.tail = FALSE)
x = pnorm(q = 5, mean = 7, sd = 2)
qnorm(x, 100, 10)
qnorm(x, 7, 2)
x = pnorm(q = 5, mean = 7, sd = 2)
dnorm(5, mean = 5, sd = 1)
dnorm(5, mean = 5, sd = 4)
dnorm(5, mean = 5, sd = 0)
#pulling csv
library(googlesheets)
library(dplyr)
my_sheets = gs_ls()
#filtering
my_sheets = my_sheets %>%
filter(as.Date(updated) > as.Date("2018-09-15")) %>%
filter(grepl("Fall 2018", sheet_title)) %>%
filter(grepl("Responses", sheet_title))
for(i in 1:length(my_sheets$sheet_title)){
if(i == 1){
to_read_sheet = gs_title(my_sheets$sheet_title[i])
worksheet = "Form Responses 1"
combined_sheet = as.data.frame(gs_read(ss=to_read_sheet, ws = worksheet))
combined_sheet$Workshop_Type = to_read_sheet$sheet_title
}
else{
to_read_sheet = gs_title(my_sheets$sheet_title[i])
worksheet = "Form Responses 1"
new_sheet = as.data.frame(gs_read(ss=to_read_sheet, ws = worksheet))
new_sheet$Workshop_Type = to_read_sheet$sheet_title
combined_sheet = rbind(combined_sheet, new_sheet)
}
}
write.csv(x = combined_sheet, "Fall_Workshops.csv", row.names = F)
setwd("~/Documents/Data_Science/Mini_Projects/Analyzing_DSI")
write.csv(x = combined_sheet, "Fall_Workshops.csv", row.names = F)
library(janitor)
Fall_workshops <- read.csv("Fall_Workshops.csv") %>% clean_names() %>% rename("email" = "email_address")
All_workshops <- read.csv("workshops.csv") %>% clean_names() %>% select(-('x'))
Combined_workshop <- bind_rows(Fall_workshops, All_workshops) %>% select(-c("r_workshop_attendance", "python_attendance", "no_punc", "polarity"))
write.csv(Combined_workshop, "Full_DSI_History.csv", row.names = F)
library(here)
install.packages("here")
library(here)
setwd(dir = here())
getwd()
library(tidyverse)
df <- read_csv("Full_DSI_History.csv")
View(df)
library(lubridate)
df %>%
mutate(day = wday(timestamp))
View(df)
parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
df %>%
mutate(timestamp = parse_date_time(x = timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s")))
View(df)
df %>%
mutate(timestamp = ~parse_date_time(x = timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s")))
df %>%
mutate(timestamp = ~parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s")))
parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
df <- parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
df
df <- read_csv("Full_DSI_History.csv")
df$timestamp <- parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
View(df)
df %>%
mutate(day = wday(timestamp))
df %>%
mutate(day = wday(timestamp)) %>%
head()
df %>%
mutate(day = wday(timestamp)) %>%
as.data.frame() %>%
head()
df %>%
mutate(day = weekdays(timestamp)) %>%
as.data.frame() %>%
head()
df %>%
mutate(day = weekdays(timestamp),
month = months(timestamp)) %>%
as.data.frame() %>%
head()
install.packages("zoo")
yq <- as.yearqtr(as.yearmon(df$timestamp) + 1/12)
library(zoo)
yq <- as.yearqtr(as.yearmon(df$timestamp) + 1/12)
factor(format(yq, "%q"), levels = 1:4,
labels = c("winter", "spring", "summer", "fall"))
factor(format(yq, "%q"), levels = 1:4,
labels = c("fall", "spring", "summer", "fall"))
factor(format(yq, "%q"), levels = 1:2,
)
factor(format(yq, "%q"), levels = 1:2,
labels = c("spring", "fall"))
getSeason <- function(DATES) {
WS <- as.Date("2012-12-15", format = "%Y-%m-%d") # Winter Solstice
SE <- as.Date("2012-3-15",  format = "%Y-%m-%d") # Spring Equinox
SS <- as.Date("2012-6-15",  format = "%Y-%m-%d") # Summer Solstice
FE <- as.Date("2012-9-15",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= WS | d < SE, "Winter",
ifelse (d >= SE & d < SS, "Spring",
ifelse (d >= SS & d < FE, "Summer", "Fall")))
}
df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("winter", "spring", "summer", "fall")),
month = months(timestamp)) %>%
as.data.frame() %>%
head()
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("winter", "spring", "summer", "fall")),
month = months(timestamp)) %>%
as.data.frame() %>%
head()
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("winter", "spring", "summer", "fall")),
month = months(timestamp)) %>%
as.data.frame() %>%
parse_date_time(x = df$timestamp,
orders = c("m/d/y h:m:s", "y-m-d h:m:s"))
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("winter", "spring", "summer", "fall")),
month = months(timestamp)) %>%
as.data.frame()
View(test)
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("spring", "spring", "fall", "fall")),
month = months(timestamp)) %>%
as.data.frame()
View(test)
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = day(timestamp)) %>%
as.data.frame()
View(test)
test= df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = yday(timestamp)) %>%
as.data.frame()
View(test)
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
as.data.frame()
View(test)
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
as.data.frame()
View(test)
as.data.frame()
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n()) %>%
as.data.frame()
View(test)
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n(), season = season) %>%
as.data.frame()
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n(), season = mean(season)) %>%
as.data.frame()
View(test)
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n(), season = median(season)) %>%
as.data.frame()
View(test)
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n(), season = c(season)) %>%
as.data.frame()
View(test)
as.data.frame()
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type) %>%
summarise(count = n()) %>%
as.data.frame()
test = df %>%
mutate(day = weekdays(timestamp),
season = factor(format(yq, "%q"), levels = 1:4,
labels = c("Spring", "Spring", "Fall", "Fall")),
month = months(timestamp),
time_of_year = ifelse(season == "Fall", yday(timestamp) - 233, yday(timestamp))) %>%
group_by(workshop_type, season, month, time_of_year) %>%
summarise(count = n()) %>%
as.data.frame()
View(test)
View(test)
